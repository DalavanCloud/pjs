;; Copyright 2015 Google Inc. All Rights Reserved.
;;
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.

(var symlib (require "./symbol"))

;; From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence
;; TODO: maybe use http://es5.github.io/#A.3 instead.
(var precTable (obj
  "lit"  19
  "list" 19  ;; e.g. [1, 2, 3]

  "[]" 18  ;; e.g. foo in foo[bar]
  "."  18  ;; e.g. foo in foo.bar
  "new" 18

  ;; note: this is 17 in the mdn docs, but that would imply an
  ;; expression like foo().bar would need parens like (foo()).bar.
  ;; the reason it doesn't is that the es5 grammar has extra entries
  ;; for callexpression . identifiername -- that is, subscripting has
  ;; multiple entries in the grammar.
  "call" 18  ;; e.g. foo in foo(bar)

  "!" 15
  "~" 15
  "++" 15
  "--" 15

  "*"  14
  "/"  14
  "%"  14

  "+"  13
  "-"  13

  "<"  11
  ">"  11
  "instanceof" 11
  "in" 11

  "==" 10
  "!=" 10

  "obj" 1  ;; object literal, e.g. {1: 2}.

  "&&" 6

  "="  3
  "+=" 3

  "()" 19  ;; forced parens

  "," 1  ;; comma-separated arg, e.g. bar in an expr like foo(bar)
  "none" 1))
(= exports.precTable precTable)

(function jsStmt (sexp)
  (var g (gen sexp))
  (if (! g.expr)
    (return g.code))  ;; Already a statement.
  (var code g.code)
  ;; function declarations don't need a trailing semi.
  (if (! (symlib.isSymbol (at sexp 0) "function"))
     (+= g.code ";"))
  (return code))

(function jsExpr (sexp prec)
  (var g (gen sexp))
  (assert g.expr
          (+ "in " sexp " stmt here not supported, had code " g.code))
  (assert (in prec precTable)
          (+ "unknown prec " prec))
  (var prec (at precTable prec))
  (return (if (> prec g.prec)
            (+ "(" g.code ")")
            g.code)))

(function snippet (code prec)
  (if prec
    (do
      (assert (in prec precTable) (+ "unknown prec " prec))
      (= prec (at precTable prec))))
  (return (obj
           code code
           prec prec)))

(var gen2)
(= exports.setGen2 (function (g) (= gen2 g)))

(function stringQuote (str)
  (return (+ "\x22" str "\x22")))
(= exports.stringQuote stringQuote)

(function gen (sexp)
  (caseSexp sexp
            (string (snippet (stringQuote sexp) "lit"))
            (number 0)
            (symbol 0)
            (sexp 0)))
