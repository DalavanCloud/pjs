;; Copyright 2015 Google Inc. All Rights Reserved.
;;
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.

(var symlib (require "./symbol"))

;; From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence
;; TODO: maybe use http://es5.github.io/#A.3 instead.
(var precTable (obj
  "lit"  19
  "list" 19  ;; e.g. [1, 2, 3]

  "[]" 18  ;; e.g. foo in foo[bar]
  "."  18  ;; e.g. foo in foo.bar
  "new" 18

  ;; note: this is 17 in the mdn docs, but that would imply an
  ;; expression like foo().bar would need parens like (foo()).bar.
  ;; the reason it doesn't is that the es5 grammar has extra entries
  ;; for callexpression . identifiername -- that is, subscripting has
  ;; multiple entries in the grammar.
  "call" 18  ;; e.g. foo in foo(bar)

  "!" 15
  "~" 15
  "++" 15
  "--" 15

  "*"  14
  "/"  14
  "%"  14

  "+"  13
  "-"  13

  "<"  11
  ">"  11
  "instanceof" 11
  "in" 11

  "==" 10
  "!=" 10

  "obj" 1  ;; object literal, e.g. {1: 2}.

  "&&" 6
  "||" 6

  "="  3
  "+=" 3

  "()" 19  ;; forced parens

  "," 1  ;; comma-separated arg, e.g. bar in an expr like foo(bar)
  "none" 1))
(= exports.precTable precTable)

;; jsStmt converts a sexp statement to a string snippet of JS.
(function jsStmt (sexp)
  (var g (gen sexp))
  (if (! g.prec)
    (return g.code))  ;; Already a statement.
  (var code g.code)
  ;; function declarations don't need a trailing semi.
  (if (! (symlib.isSymbol (at sexp 0) "function"))
     (+= code ";"))
  (return code))

;; jsExpr converts a sexp expression to a string snippet of JS.
(function jsExpr (sexp prec)
  (var g (gen sexp))
  (assert g.prec
          (+ "in " sexp " stmt here not supported, had code " g.code))
  (assert (in prec precTable)
          (+ "unknown prec " prec))
  (var prec (at precTable prec))
  (return (if (> prec g.prec)
            (+ "(" g.code ")")
            g.code)))

;; snippet wraps a snippet of code in a JS object carrying the code
;; and the precedence of expression (if it's an expression).
(function snippet (code prec)
  (if prec
    (do
      (assert (in prec precTable) (+ "unknown prec " prec))
      (= prec (at precTable prec))))
  (return (obj
           code code
           prec prec)))

(function stringQuote (str)
  (return (+ "\x22" str "\x22")))
(= exports.stringQuote stringQuote)

(function genBinOp (sexp)
  (var op ((. (at sexp 0) sym)))
  (var args (sexp.slice 1))
  (var exprs (args.map (fn (e) (jsExpr e op))))
  (var js (exprs.join (+ " " op " ")))
  (return (snippet js op)))

(function genUnOp (sexp)
  (var op ((. (at sexp 0) sym)))
  (var js (+ op (jsExpr (at sexp 1) op)))
  (return (snippet js op)))

(function genIf (sexp)
  (if (|| (< sexp.length 3) (> sexp.length 4))
    (throw (new Error "bad args to 'if'")))
  (var cond (jsExpr (at sexp 1) "none"))
  (var body (jsStmt (at sexp 2)))
  (var js (+ "if (" cond ") {" body "}"))
  (if (== sexp.length 4)
    (do
      (var elsebody (jsStmt (at sexp 3)))
      (+= js (+" else {" elsebody "}"))))
  (return (snippet js)))

(function genVar (sexp)
  (var name ((. (at sexp 1) sym)))
  (var js (+ "var " name))
  (if (> sexp.length 2)
    (do
      (var val (jsExpr (at sexp 2) "none"))
      (+= js (+ " = " val))))
  (+= js ";")
  (return (snippet js)))

(var builtins (obj
  "if" genIf
  "var" genVar))

;; TODO: do this at compile time.
(var binops `("+" "-" "*" "/"
             "=" "==" "!=" "<" ">" "<=" ">="
             "&&" "||"
             "in"))
(forEach op binops
         (= (at builtins op) genBinOp))

(var unops `("++" "--" "!"))
(forEach op unops
         (= (at builtins op) genUnOp))

(function genForm (sexp)
  (var op ((. (at sexp 0) sym)))

  (if (in op builtins)
    (return ((at builtins op) sexp)))

  (assert false "unimplemented"))

(function gen (sexp)
  (return
   (caseSexp sexp
             (string (snippet (stringQuote sexp) "lit"))
             (number (snippet sexp "lit"))
             (symbol (snippet (sexp.sym) "lit"))
             (sexp (genForm sexp)))))

(function genStmts (sexps)
  (var js "")
  (forEach sexp sexps
    (+= js (jsStmt sexp)))
  (return js))
(= exports.genStmts genStmts)
