;; Copyright 2015 Google Inc. All Rights Reserved.
;;
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.

(var macro (require "./macro"))
(var quasi (require "./quasi"))
(var symbol (require "./symbol"))

;; From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence
;; TODO: maybe use http://es5.github.io/#A.3 instead.
(var precTable (obj
  "lit"  19
  "list" 19  ;; e.g. [1, 2, 3]

  "[]" 18  ;; e.g. foo in foo[bar]
  "."  18  ;; e.g. foo in foo.bar
  "new" 18

  ;; note: this is 17 in the mdn docs, but that would imply an
  ;; expression like foo().bar would need parens like (foo()).bar.
  ;; the reason it doesn't is that the es5 grammar has extra entries
  ;; for callexpression . identifiername -- that is, subscripting has
  ;; multiple entries in the grammar.
  "call" 18  ;; e.g. foo in foo(bar)

  "!" 15
  "~" 15
  "++" 15
  "--" 15

  "*"  14
  "/"  14
  "%"  14

  "+"  13
  "-"  13

  "<"  11
  ">"  11
  "instanceof" 11
  "in" 11

  "==" 10
  "!=" 10

  "obj" 1  ;; object literal, e.g. {1: 2}.

  "&&" 6
  "||" 6

  "="  3
  "+=" 3

  "," 1  ;; comma-separated arg, e.g. bar in an expr like foo(bar)
  "none" 1))
(= exports.precTable precTable)

(function showError (sexp text)
  (return (+ "at " sexp.line ":" sexp.col ": " sexp text)))

;; jsStmt converts a sexp statement to a string snippet of JS.
(function jsStmt (sexp outVar)
  (if (== sexp.length 0)
    (return ";"))
  (var g (gen sexp outVar))
  (if (! g.prec)
    (return g.code))  ;; Already a statement.
  (var code g.code)
  (if (== outVar "return")
    (return (+ "return " code ";")))
  (if outVar
    (return (+ outVar " = " code ";")))

  ;; Otherwise, it's a bare expression as a statement.
  ;; Add the trailing semi, except to function declarations.
  (if (! (symbol.isSym (at sexp 0) "function"))
     (+= code ";"))
  (return code))

;; jsExpr converts a sexp expression to a string snippet of JS.
(function jsExpr (sexp prec)
  (if (&& (== prec "none") (== sexp.length 0))
    (return ""))
  (var g (gen sexp))
  (assert g.prec
          (showError sexp (+ "stmt here not supported, had code " g.code)))
  (assert (in prec precTable)
          (+ "unknown prec " prec))
  (var prec (at precTable prec))
  (return (if (> prec g.prec)
            (+ "(" g.code ")")
            g.code)))

;; snippet wraps a snippet of code in a JS object carrying the code
;; and the precedence of expression (if it's an expression).
(function snippet (code prec)
  (if prec
    (do
      (assert (in prec precTable) (+ "unknown prec " prec))
      (= prec (at precTable prec))))
  (return (obj
           code code
           prec prec)))

(function stringQuote (str)
  (return (+ "\x22" str "\x22")))
(= exports.stringQuote stringQuote)

(function genBinOp (sexp)
  (var op (symbol.str (at sexp 0)))
  (var args (sexp.slice 1))
  (var exprs (args.map (fn (e) (jsExpr e op))))
  (var js (exprs.join (+ " " op " ")))
  (return (snippet js op)))

(function genUnOp (sexp)
  (var op (symbol.str (at sexp 0)))
  (var js (+ op (jsExpr (at sexp 1) op)))
  (return (snippet js op)))

(function genKeywordStatement (sexp)
  (var body "")
  (if (at sexp 1)
    (= body (+ " " (jsExpr (at sexp 1) "none"))))

  (return (snippet (+ (symbol.str (at sexp 0))
                      body
                      ";"))))

(function genCall (sexp)
  (var func (jsExpr (at sexp 0) "call"))
  (var args (genAsArgs (sexp.slice 1)))
  (return (snippet (+ func "(" args ")") "call")))

(function genDot (sexp outVar)
  (if (> sexp.length 3)
    (do
      (var args (sexp.slice 3))
      (= sexp (sexp.slice 0 3))
      (if (&& (== args.length 1) (== (. (at args 0) length) 0))
        (= args []))
      (return (gen (. [sexp] concat args) outVar))))
  (var obj (jsExpr (at sexp 1) "."))
  (var attr (symbol.str (at sexp 2)))
  (return (snippet (+ obj "." attr) ".")))

(function genQuote (sexp)
  (var quoted (jsExpr (quasi.qq (at sexp 1)) "none"))
  (return (snippet quoted "none")))

(function genAt (sexp)
  (var obj (jsExpr (at sexp 1) "[]"))
  (var index (jsExpr (at sexp 2) "none"))
  (return (snippet (+ obj "[" index "]") "[]")))

(function genDo (sexp)
  (return (snippet (genStmts (sexp.slice 1)))))

(function genFor (sexp)
  (var init (jsStmt (at sexp 1)))
  (var test (jsExpr (at sexp 2) "none"))
  (var iter (jsExpr (at sexp 3) "none"))
  (var body (genStmts (sexp.slice 4)))
  (return (snippet (+ "for (" init " " test "; " iter ") {"
                      body "}"))))

(function genFunction (sexp)
  (if (symbol.isSym (at sexp 1))
    (do
      (var name (symbol.str (at sexp 1)))
      (var args (at sexp 2))
      (var body (sexp.slice 3)))
    (do
      (var name "")
      (var args (at sexp 1))
      (var body (sexp.slice 2))))

  (var vararg null)
  (for (var i 0) (< i args.length) (++ i)
    (if (symbol.isSym (at args i) ".")
      (do
        (= vararg (at args (+ i 1)))
        (= args (args.slice 0 i))
        (break))))

  (var jsargs (. (map (fn (arg) (symbol.str arg))
                      args)
                 join ","))

  (var varargjs
       (if vararg
         (jsStmt `(var ,vararg
                       (Array.prototype.slice.call arguments ,i)))
         ""))

  (var js (+ "function " name "(" jsargs ") {"
             varargjs
             (genStmts body)
             "}"))
  (return (snippet js "lit")))

(function genIf (sexp outVar)
  (if (|| (< sexp.length 3) (> sexp.length 4))
    (throw (new Error "bad args to 'if'")))
  (var cond (jsExpr (at sexp 1) "none"))
  (var body (jsStmt (at sexp 2) outVar))
  (var js (+ "if (" cond ") {" body "}\n"))
  (if (== sexp.length 4)
    (do
      (var elsebody (jsStmt (at sexp 3) outVar))
      (+= js (+" else {" elsebody "}\n"))))
  (return (snippet js)))

(function genList (sexp)
  (return (snippet (+ "[" (genAsArgs (sexp.slice 1)) "]") "lit")))

(function genNew (sexp)
  ;; (new x y) is sugar for (new (x y)).
  (if (> sexp.length 2)
    (return (genNew (list (at sexp 0) (sexp.slice 1)))))
  (return (snippet (+ "new " (jsExpr (at sexp 1) "new")) "new")))

(function genObj (sexp)
  (var js "{")
  (for (var i 1) (< i sexp.length) (+= i 2)
    (var key (at sexp i))
    (var val (at sexp (+ i 1)))

    (if (symbol.isSym key)
      (= key (symbol.str key))
      (if (== (typeof key) "string")
        (= key (stringQuote key))
        (throw (new Error (+ "cannot make obj literal with " key)))))
    (= val (jsExpr val "none"))

    (if (> i 1)
      (+= js ", "))
    (+= js (+ key ":" val)))
  (+= js "}")
  (return (snippet js "lit")))

(function genReturn (sexp outVar)
  (var body (gen (at sexp 1) "return"))
  (if body.prec
    (return (snippet (+ "return " body.code ";")))
    (return body)))

(function genSwitch (sexp outVar)
  (var cond (jsExpr (at sexp 1) "none"))
  (var js (+ "switch (" cond ") {\n"))
  (for (var i 2) (< i sexp.length) (++ i)
    (var scase (at sexp i))
    (if (symbol.isSym (at scase 0) "default")
      (+= js "default:\n")
      (+= js (+ "case " (jsExpr (at scase 0) "none") ":\n")))
    (if (> js.length 1)
      (do
        (+= js (genStmts (scase.slice 1) outVar))
        (if (&& outVar (!= outVar "return"))
          (+= js "break;")))))
  (+= js "}")
  (return (snippet js)))

(function genVar (sexp outVar)
  (assert (! outVar) "can't use var as expr")
  (var name (symbol.str (at sexp 1)))
  (var js (+ "var " name))
  (if (> sexp.length 2)
    (do
      (var body (gen (at sexp 2) name))
      (if body.prec
        (+= js (+ " = " body.code ";\n"))
        (+= js (+ ";\n" body.code))))
    (+= js ";"))
  (return (snippet js)))

(function genWhile (sexp outVar)
  (assert (! outVar) "can't use while as expr")
  (var cond (jsExpr (at sexp 1) "none"))
  (return (snippet (+ "while (" cond ") {\n"
                      (genStmts (sexp.slice 2))
                      "}"))))

(var builtins (obj
  "break" genKeywordStatement
  "continue" genKeywordStatement
  "throw" genKeywordStatement

  "." genDot
  "qq" genQuote

  "at" genAt
  "do" genDo
  "if" genIf
  "for" genFor
  "function" genFunction
  "list" genList
  "new" genNew
  "obj" genObj
  "return" genReturn
  "switch" genSwitch
  "var" genVar
  "while" genWhile))

;; TODO: do this at compile time.
(var binops `("+" "-" "*" "/"
             "=" "==" "!=" "<" ">" "<=" ">="
             "&&" "||"
             "+=" "-=" "*=" "/="
             "in" "instanceof"))
(forEach op binops
         (= (at builtins op) genBinOp))

(var unops `("++" "--" "!"))
(forEach op unops
         (= (at builtins op) genUnOp))

(var macros (obj
  "fn" macro.fn
  "caseSexp" macro.caseSexp
  "forEach" macro.forEach
  "assert" macro.assert
  "genSym" symbol.genSym.take))

(function runMacro (f sexp outVar)
  (var code (f.apply null (sexp.slice 1)))
  (return (gen code outVar)))

(function genAsArgs (args)
  (return (. (map (fn (e) (jsExpr e ",")) args)
             join ", ")))

(function genForm (sexp outVar)
  (if (symbol.isSym (at sexp 0))
    (do
      (var op (symbol.str (at sexp 0)))
      (if (in op builtins)
        (return ((at builtins op) sexp outVar)))
      (if (in op macros)
        (return (runMacro (at macros op) sexp outVar)))))

  (return (genCall sexp outVar)))

(function gen (sexp outVar)
  ;; (console.log "gen" sexp outVar)
  (return
   (caseSexp sexp
             (string (snippet (stringQuote sexp) "lit"))
             (number (snippet sexp "lit"))
             (symbol (snippet (symbol.str sexp) "lit"))
             (sexp (genForm sexp outVar)))))

(function genStmts (sexps outVar)
  (var js "")
  (forEach sexp sexps
    (+= js (jsStmt sexp outVar)))
  (return js))
(= exports.genStmts genStmts)
