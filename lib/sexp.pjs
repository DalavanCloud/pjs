;; Copyright 2015 Google Inc. All Rights Reserved.
;;
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.

(var symlib (require "./symbol.js"))
(var sym symlib.get)

;; To match a regex at an arbitrary offset, we use this janky workaround:
;; 1) make the regex global (with the /g flag);
;; 2) make the regex capture if it matches;
;; 3) add a |. at the end so it always matches at the current offset;
;; 4) then use the .lastIndex method to adjust where it attempts to match.
;; Then use reMatchOfs, which returns the match at the given offset if
;; there was a match.

(var symbolRE (new RegExp (+ "("
                             "[a-zA-Z_][a-zA-Z_.0-9]*"
                             "|"
                             "[a-zA-Z_.\\[\\]0-9&!=|+<>#{}*-]+"
                             ")|.")
                   "g"))

(function reMatchOfs (re str ofs)
  (= re.lastIndex ofs)
  (var match (re.exec str))
  (if (|| (! match) (! (at match 1)))
    (return null))
  (return (at match 1)))

(function isNumber (atom)
  (var re (new RegExp "^\\d+$"))
  (return (re.test atom)))

(function Reader (str)
  (= this.str str)
  (= this.ofs 0)
  (= this.lineOfs 0)
  (= this.line 1))

(= Reader.prototype.pos (function (out)
  (if (! out)
    (= out (obj)))
  (= out.line this.line)
  (= out.col (- this.ofs this.lineOfs))
  (return out)))

(= Reader.prototype.errorAtPoint (function ()
  (var message ([].join.call arguments ""))
  (var pos (this.pos))
  (return (new Error (+ message " at " pos.line ":" pos.col)))))

(= Reader.prototype.readQuote (function ()
  (var str "")
  (var open (at this.str this.ofs))
  (++ this.ofs)
  (var close (switch open
               ("<" ">")
               (default open)))
  (for () (< this.ofs this.str.length) (++ this.ofs)
    (var c (at this.str this.ofs))
    (if (== c close)
      (break))
    (+= str c))
  (var actualClose (at this.str this.ofs))
  (if (!= close actualClose)
    (throw (this.errorAtPoint "expected end of quote " close ", got " actualClose)))
  (++ this.ofs)
  (return str)))

(= Reader.prototype.read (function ()
  (while (< this.ofs this.str.length) 
    (var c (at this.str this.ofs))
    (++ this.ofs)
    (switch c
      (" " (continue))
      ("\n"
       (++ this.line)
       (= this.lineOfs (+ this.ofs 1))
       (continue))
      (";"
       (for () (< this.ofs this.str.length) (++ this.ofs)
         (if (== (at this.str this.ofs) "\n")
           (break)))
       (continue))
      ("("
       (var sexp [])
       (this.pos sexp)
       (for (var s) (!= (= s (this.read)) null) ()
         (. sexp push s))
       (if (!= (at this.str this.ofs) ")")
         (throw "expected rparen"))
       (++ this.ofs)
       (return sexp))
      (")"
       (-- this.ofs)
       (return null))
      ("\x22"
       (-- this.ofs)
       (return (this.readQuote)))
      ("`"
       (return (list (sym "`") (this.read))))
      (","
       (if (== (at this.str this.ofs) "@")
         (do
           (++ this.ofs)
           (return (list (sym ",@") (this.read)))))
       (return (list (sym ",") (this.read))))
      (":"
       (var symbol (this.read))
       (return (list (sym "pjs.sym") (symlib.str symbol))))
      ("#"  ;; Special quote.
       (var quoter (this.read))
       (var text (this.readQuote))
       (return `(,(sym "#") ,quoter ,text)))
      (default
        (-- this.ofs)
        (var atom (reMatchOfs symbolRE this.str this.ofs))
        (if (! atom)
          (do
            (var pos (this.pos))
            (throw (this.errorAtPoint "bad char " c))))
        (+= this.ofs atom.length)
        (if (isNumber atom)
          (return (parseInt atom))
          (return (sym atom)))))
    (throw "shouldn't be reached"))
  (return null)))

(function parse (data)
  (var r (new Reader (+ "(" (data.toString) ")")))
  (return (r.read)))

(= exports.parse parse)
(= exports.Reader Reader)
