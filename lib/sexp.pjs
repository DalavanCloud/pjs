;; Copyright 2015 Google Inc. All Rights Reserved.
;;
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.

(var sym (. (require "./symbol.js") sym))

(function isAtomChar (char)
  (var re (new RegExp "[a-zA-Z_.\\[\\]0-9&!=|+<>#{}*-]"))
  (return (re.test char)))

(function isNumber (atom)
  (var re (new RegExp "^\\d+$"))
  (return (re.test atom)))

(function Reader (str)
  (= this.str str)
  (= this.ofs 0))

(= Reader.prototype.read (function ()
  (while (< this.ofs this.str.length) 
    (var c (at this.str this.ofs))
    (++ this.ofs)
    (switch c
      (" " (continue))
      ("\n" (continue))
      (";"
       (for () (< this.ofs this.str.length) (++ this.ofs)
         (if (== (at this.str this.ofs) "\n")
           (break)))
       (continue))
      ("("
       (var sexp [])
       (for (var s) (!= (= s (this.read)) null) ()
         (. sexp push s))
       (if (!= (at this.str this.ofs) ")")
         (throw "expected rparen"))
       (++ this.ofs)
       (return sexp))
      (")"
       (-- this.ofs)
       (return null))
      ("\x22"
       (var str "")
       (for () (< this.ofs this.str.length) (++ this.ofs)
         (var c (at this.str this.ofs))
         (if (== c "\x22")
           (break))
         (+= str c))
       (if (!= (at this.str this.ofs) "\x22")
         (throw "expected rparen"))
       (++ this.ofs)
       (return str))
      ("`"
       (return (list (sym "qq") (this.read))))
      (","
       (if (== (at this.str this.ofs) "@")
         (do
           (++ this.ofs)
           (return (list (sym "uqs") (this.read)))))
       (return (list (sym "uq") (this.read))))
      (":"
       (var symbol (this.read))
       (return (list (sym "pjs.sym") (symbol.sym))))
      (default
        (if (! (isAtomChar c))
          (throw (+ "bad char " c " at offset " this.ofs)))
        (var atom c)
        (for () (< this.ofs this.str.length) (++ this.ofs)
          (var c (at this.str this.ofs))
          (if (! (isAtomChar c))
            (break))
          (+= atom c))
        (if (isNumber atom)
          (return (parseInt atom))
          (return (sym atom)))))
    (throw "shouldn't be reached"))
  (return null)))

(function parse (data)
  (var r (new Reader (+ "(" (data.toString) ")")))
  (return (r.read)))

(= exports.parse parse)
(= exports.Reader Reader)
