;; Copyright 2015 Google Inc. All Rights Reserved.
;;
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.

(function isSplice (sexp)
  (return (&& (== sexp.length 2)
              (pjs.isSym (at sexp 0) ",@"))))

(function qq (sexp)
  (return
   (caseSexp sexp
     (symbol (return `(pjs.sym ,(pjs.symStr sexp))))
     (number (return sexp))
     (string (return sexp))
     (sexp
      (do
        (if (== sexp.length 2)
          (do
            (if (pjs.isSym (at sexp 0) ",")
              (return (at sexp 1)))
            (if (pjs.isSym (at sexp 0) ",@")
              (throw (new Error "no uqs here")))))

        ;; Gather up a list of parts: runs of elements in the list
        ;; along with ,@foo list unsplices.
        (var parts [])
        (var cur null)
        (forEach s sexp
           (if (isSplice s)
             (do
               (parts.push (at s 1))
               (= cur null))
             (do
               (if (! cur)
                 (do
                   (= cur `(list))
                   (parts.push cur)))
               (cur.push (qq s)))))

        ;; If parts has only one entry we can just return it.
        ;;   (list 1 2 3)
        ;; If there is a splice of x, we want to return code that concats
        ;; the parts list:
        ;;   ([].concat.apply []
        ;;     ((list 1 2 3)
        ;;      x
        ;;      ...))
        (if (> parts.length 1)
          (do
            (parts.unshift :list)
            (return `([].concat.apply [] ,parts)))
          (return (at parts 0))))))))

(= exports.qq qq)
