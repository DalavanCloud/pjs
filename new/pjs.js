// Copyright 2015 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

var beautify = require('js-beautify').js_beautify;
var fs = require('fs');
var parseArgs = require('minimist');

var gen = require('./gen');
var sexp_print = require('./sexp-print').toStr;
var sexpp = require('./sexp');
var symlib = require('./symbol');
var util = require('./util');

// Expose a global pjs object so it can be found by macro evals.
global.pjs = {
  assoc: util.assoc,
  sym: symlib.get,
  isSym: symlib.isSym,
  symStr: symlib.str,
  quote: {
    q: gen.stringQuote,
    re: gen.reQuote,
  },
};

var args = parseArgs(process.argv.slice(2), {
  boolean: ['u', 'o', 'd'],
  string: ['_'],
  unknown: function(arg) {
    if (arg[0] === '-') {
      console.log('unknown arg', arg);
      process.exit(1);
    }
    return true;
  }
});

var infile = args._[0];
var outfile = args._[1];
var data = fs.readFileSync(infile);

var p = sexpp.parse(data);
// console.log(p);
if (args.d) {
  console.log(sexp_print(p));
}

if (!args.o) {
  js = gen.genStmts(p);
} else {
  var gen = require('./old-gen');
  var js = gen(p);
}
js = '// generated by pjs -- do not edit\n' + js;

if (!args.u) {
  js = beautify(js, {indent_size:2});
}
if (js[js.length - 1] != '\n') {
  js += '\n';
}

fs.writeFileSync(outfile, js);
